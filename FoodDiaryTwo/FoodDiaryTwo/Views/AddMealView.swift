//
//  AddMealView.swift
//  FoodDiaryTwo
//
//  Created by user on 31.07.2025.
//

import SwiftUI
import SwiftData
import PhotosUI

struct AddMealView: View {
    @Environment(\.dismiss) private var dismiss
    @Environment(\.modelContext) private var modelContext
    
    @State private var mealName = ""
    @State private var selectedMealType: MealType
    @State private var selectedTime = Date()
    @State private var calories = ""
    @State private var protein = ""
    @State private var carbs = ""
    @State private var fat = ""
    @State private var notes = ""
    @State private var selectedPhotoItem: PhotosPickerItem?
    @State private var selectedImage: UIImage? = nil
    @State private var isImageLoading = false
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ
    @State private var showImagePicker = false
    @State private var sourceType: UIImagePickerController.SourceType = .camera
    
    // ViewModel –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    @StateObject private var recognitionViewModel = FoodRecognitionViewModel()
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    @State private var showRecognitionResults = false
    @State private var showErrorAlert = false
    
    init(mealType: MealType = .breakfast) {
        self._selectedMealType = State(initialValue: mealType)
        print("üèóÔ∏è AddMealView –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è")
    }
    
    // MealType is defined in FoodEntry.swift
    
    var body: some View {
        ZStack {
            PlumpyBackground(style: .primary)
                .ignoresSafeArea()
            
            VStack(spacing: 0) {
                // Navigation Bar
                PlumpyNavigationBar(
                    title: LocalizationManager.shared.localizedString(.addMeal),
                    leftButton: PlumpyNavigationButton(
                        icon: "xmark",
                        title: LocalizationManager.shared.localizedString(.cancel),
                        style: .outline
                    ) {
                        dismiss()
                    },
                    rightButton: PlumpyNavigationButton(
                        icon: "checkmark",
                        title: LocalizationManager.shared.localizedString(.save),
                        style: .primary
                    ) {
                        saveMeal()
                    }
                )
                
                ScrollView {
                    VStack(spacing: PlumpyTheme.Spacing.medium) {
                        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                        basicInfoSection
                        
                        // –§–æ—Ç–æ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º
                        photoSectionWithRecognition
                        
                        // –ó–∞–º–µ—Ç–∫–∏
                        notesSection
                        
                        PlumpySpacer(size: .large)
                    }
                    .padding(.horizontal, PlumpyTheme.Spacing.medium)
                    .padding(.top, PlumpyTheme.Spacing.medium)
                }
            }
        }
        .sheet(isPresented: $showImagePicker) {
            ImagePicker(
                selectedImage: $selectedImage, 
                sourceType: sourceType
            )
        }
        .onChange(of: selectedPhotoItem) {
            Task {
                print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
                print("üì∏ selectedPhotoItem: \(selectedPhotoItem != nil ? "–µ—Å—Ç—å" : "–Ω–µ—Ç")")
                isImageLoading = true // Set loading state
                if let item = selectedPhotoItem,
                   let data = try? await item.loadTransferable(type: Data.self),
                   let image = UIImage(data: data) {
                    print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ä–∞–∑–º–µ—Ä: \(image.size)")
                    print("üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(data.count) –±–∞–π—Ç")
                    selectedImage = image
                    print("üñºÔ∏è –í—ã–∑—ã–≤–∞–µ–º recognitionViewModel.setImage()")
                    print("üì∏ selectedImage –≤ AddMealView –ø–µ—Ä–µ–¥ setImage: \(selectedImage != nil ? "–µ—Å—Ç—å" : "–Ω–µ—Ç")")
                    recognitionViewModel.setImage(image)
                    print("‚úÖ recognitionViewModel.setImage() –∑–∞–≤–µ—Ä—à–µ–Ω")
                    print("üì∏ selectedImage –≤ AddMealView –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: \(selectedImage != nil ? "–µ—Å—Ç—å" : "–Ω–µ—Ç")")
                    print("üì∏ selectedImage –≤ ViewModel –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: \(recognitionViewModel.selectedImage != nil ? "–µ—Å—Ç—å" : "–Ω–µ—Ç")")
                } else {
                    print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                    print("üì∏ selectedPhotoItem: \(selectedPhotoItem != nil ? "–µ—Å—Ç—å" : "–Ω–µ—Ç")")
                }
                isImageLoading = false // Reset loading state
            }
        }
        .sheet(isPresented: $showRecognitionResults) {
            if let result = recognitionViewModel.recognitionResult {
                NavigationView {
                    FoodRecognitionResultView(
                        result: result,
                        onApply: {
                            applyRecognitionResults(result)
                            showRecognitionResults = false
                        },
                        onRetry: {
                            showRecognitionResults = false
                            Task {
                                await recognitionViewModel.recognizeFood()
                            }
                        }
                    )
                }
            }
        }
        .alert("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", isPresented: $showErrorAlert) {
            Button("OK") { }
        } message: {
            Text(recognitionViewModel.errorMessage ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        }
        .onReceive(recognitionViewModel.$showError) { showError in
            print("‚ùå onReceive showError: \(showError)")
            if showError {
                showErrorAlert = true
            }
        }
        .onReceive(recognitionViewModel.$recognitionResult) { result in
            print("üìä onReceive recognitionResult: \(result != nil ? "–µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç" : "–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")")
            if let result = result {
                print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω: \(result.name), \(result.calories) –∫–∞–ª–æ—Ä–∏–π")
                
                // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                mealName = result.name
                calories = String(format: "%.0f", result.calories)
                protein = String(format: "%.1f", result.protein)
                fat = String(format: "%.1f", result.fat)
                carbs = String(format: "%.1f", result.carbs)
                
                print("üìù –ü–æ–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω—ã:")
                print("   - –ù–∞–∑–≤–∞–Ω–∏–µ: \(mealName)")
                print("   - –ö–∞–ª–æ—Ä–∏–∏: \(calories)")
                print("   - –ë–µ–ª–∫–∏: \(protein)")
                print("   - –ñ–∏—Ä—ã: \(fat)")
                print("   - –£–≥–ª–µ–≤–æ–¥—ã: \(carbs)")
                
                showRecognitionResults = true
            }
        }
    }
    
    private var basicInfoSection: some View {
        VStack(spacing: PlumpyTheme.Spacing.medium) {
            Text(LocalizationManager.shared.localizedString(.foodDiary))
                .font(PlumpyTheme.Typography.headline)
                .fontWeight(.semibold)
                .foregroundColor(PlumpyTheme.textPrimary)
                .frame(maxWidth: .infinity, alignment: .leading)
            
            // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
            PlumpyField(
                title: LocalizationManager.shared.localizedString(.mealName),
                placeholder: LocalizationManager.shared.localizedString(.mealName),
                text: $mealName,
                icon: "fork.knife",
                isRequired: true
            )
            
            // –¢–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
            VStack(alignment: .leading, spacing: PlumpyTheme.Spacing.small) {
                Text(LocalizationManager.shared.localizedString(.mealType))
                    .font(PlumpyTheme.Typography.subheadline)
                    .fontWeight(.medium)
                    .foregroundColor(PlumpyTheme.textSecondary)
                
                LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 2), spacing: PlumpyTheme.Spacing.small) {
                    ForEach(MealType.allCases, id: \.self) { mealType in
                        PlumpyChip(
                            title: mealType.displayName,
                            icon: mealType.icon,
                            style: selectedMealType == mealType ? .primary : .outline,
                            isSelected: selectedMealType == mealType
                        ) {
                            selectedMealType = mealType
                        }
                    }
                }
            }
            
            // –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
            VStack(alignment: .leading, spacing: PlumpyTheme.Spacing.small) {
                Text(LocalizationManager.shared.localizedString(.timeLabel))
                    .font(PlumpyTheme.Typography.subheadline)
                    .fontWeight(.medium)
                    .foregroundColor(PlumpyTheme.textSecondary)
                
                DatePicker("", selection: $selectedTime, displayedComponents: [.date, .hourAndMinute])
                    .datePickerStyle(.compact)
                    .labelsHidden()
                    .padding(PlumpyTheme.Spacing.medium)
                    .plumpyCard(
                        cornerRadius: PlumpyTheme.Radius.medium,
                        backgroundColor: PlumpyTheme.surfaceSecondary
                    )
            }
            
            // –ö–∞–ª–æ—Ä–∏–∏
            PlumpyField(
                title: LocalizationManager.shared.localizedString(.calories),
                placeholder: LocalizationManager.shared.localizedString(.calories),
                text: $calories,
                keyboardType: .numberPad,
                icon: "flame.fill",
                iconColor: PlumpyTheme.warning,
                isRequired: true
            )

            // –ë–ñ–£
            HStack(spacing: PlumpyTheme.Spacing.medium) {
                PlumpyField(
                    title: LocalizationManager.shared.localizedString(.protein),
                    placeholder: LocalizationManager.shared.localizedString(.protein),
                    text: $protein,
                    keyboardType: .decimalPad,
                    icon: "bolt.heart",
                    iconColor: PlumpyTheme.secondaryAccent,
                    isRequired: false
                )
                PlumpyField(
                    title: LocalizationManager.shared.localizedString(.carbs),
                    placeholder: LocalizationManager.shared.localizedString(.carbs),
                    text: $carbs,
                    keyboardType: .decimalPad,
                    icon: "leaf",
                    iconColor: PlumpyTheme.primaryAccent,
                    isRequired: false
                )
                PlumpyField(
                    title: LocalizationManager.shared.localizedString(.fat),
                    placeholder: LocalizationManager.shared.localizedString(.fat),
                    text: $fat,
                    keyboardType: .decimalPad,
                    icon: "drop",
                    iconColor: PlumpyTheme.tertiaryAccent,
                    isRequired: false
                )
            }
        }
        .plumpyCard()
    }
    
    // MARK: - –°–µ–∫—Ü–∏—è —Ñ–æ—Ç–æ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º
    private var photoSectionWithRecognition: some View {
        VStack(spacing: PlumpyTheme.Spacing.medium) {
            Text(LocalizationManager.shared.localizedString(.recognizeCalories))
                .font(PlumpyTheme.Typography.headline)
                .fontWeight(.semibold)
                .foregroundColor(PlumpyTheme.textPrimary)
                .frame(maxWidth: .infinity, alignment: .leading)
            
            // –í—ã–±–æ—Ä —Ñ–æ—Ç–æ
            VStack(spacing: PlumpyTheme.Spacing.small) {
                if let image = selectedImage {
                    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    Image(uiImage: image)
                        .resizable()
                        .aspectRatio(contentMode: .fill)
                        .frame(height: 200)
                        .clipped()
                        .cornerRadius(PlumpyTheme.Radius.medium)
                        .overlay(
                            RoundedRectangle(cornerRadius: PlumpyTheme.Radius.medium)
                                .stroke(PlumpyTheme.border, lineWidth: 1)
                        )
                    
                    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–æ—Ç–æ
                    HStack(spacing: PlumpyTheme.Spacing.medium) {
                        // –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π
                        Button(action: {
                            print("üîò –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∞")
                            print("üì∏ selectedImage –≤ AddMealView: \(selectedImage != nil ? "–µ—Å—Ç—å" : "–Ω–µ—Ç")")
                            print("üì∏ selectedImage –≤ ViewModel: \(recognitionViewModel.selectedImage != nil ? "–µ—Å—Ç—å" : "–Ω–µ—Ç")")
                            print("üîÑ isProcessing: \(recognitionViewModel.isProcessing)")
                            print("üîÑ isImageLoading: \(isImageLoading)")
                            print("üìä processingProgress: \(recognitionViewModel.processingProgress)")
                            
                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                            if let image = selectedImage {
                                print("üì∏ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ AddMealView: \(image.size)")
                            }
                            if let image = recognitionViewModel.selectedImage {
                                print("üì∏ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ViewModel: \(image.size)")
                            }
                            
                            Task {
                                await recognitionViewModel.recognizeFood()
                            }
                        }) {
                            HStack {
                                if recognitionViewModel.isProcessing {
                                    ProgressView()
                                        .progressViewStyle(CircularProgressViewStyle(tint: .white))
                                        .scaleEffect(0.8)
                                    Text("–†–∞—Å–ø–æ–∑–Ω–∞–µ–º...")
                                        .foregroundColor(.white)
                                } else {
                                    Image(systemName: "camera.viewfinder")
                                    Text("–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏")
                                }
                            }
                            .frame(maxWidth: .infinity)
                            .padding()
                            .background(recognitionViewModel.isProcessing ? Color.gray : Color.blue)
                            .foregroundColor(.white)
                            .cornerRadius(10)
                        }
                        .disabled(recognitionViewModel.isProcessing || isImageLoading)
                        
                        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                        if recognitionViewModel.isProcessing {
                            VStack(alignment: .leading, spacing: 8) {
                                ProgressView(value: recognitionViewModel.processingProgress)
                                    .progressViewStyle(LinearProgressViewStyle())
                                    .scaleEffect(y: 2)
                                
                                Text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... \(Int(recognitionViewModel.processingProgress * 100))%")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                            .padding(.horizontal)
                        }
                        
                        // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞
                        Button(action: {
                            selectedImage = nil
                            selectedPhotoItem = nil
                            recognitionViewModel.resetResults()
                        }) {
                            Image(systemName: "trash")
                                .foregroundColor(.red)
                                .frame(width: 44, height: 44)
                                .background(PlumpyTheme.surfaceSecondary)
                                .cornerRadius(PlumpyTheme.Radius.medium)
                        }
                        .disabled(recognitionViewModel.isProcessing)
                    }
                    
                    // –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                    if recognitionViewModel.isProcessing {
                        VStack(spacing: PlumpyTheme.Spacing.small) {
                            ProgressView(value: recognitionViewModel.processingProgress)
                                .progressViewStyle(LinearProgressViewStyle(tint: PlumpyTheme.primaryAccent))
                            
                            Text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... \(Int(recognitionViewModel.processingProgress * 100))%")
                                .font(PlumpyTheme.Typography.caption1)
                                .foregroundColor(PlumpyTheme.textSecondary)
                        }
                        .padding(.horizontal, PlumpyTheme.Spacing.medium)
                        .padding(.vertical, PlumpyTheme.Spacing.small)
                        .background(PlumpyTheme.surfaceSecondary)
                        .cornerRadius(PlumpyTheme.Radius.small)
                    } else if isImageLoading {
                        // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        HStack {
                            ProgressView()
                                .scaleEffect(0.8)
                                .progressViewStyle(CircularProgressViewStyle(tint: PlumpyTheme.primaryAccent))
                            Text("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                                .font(PlumpyTheme.Typography.caption1)
                                .foregroundColor(PlumpyTheme.textSecondary)
                        }
                        .padding(.horizontal, PlumpyTheme.Spacing.medium)
                        .padding(.vertical, PlumpyTheme.Spacing.small)
                        .background(PlumpyTheme.surfaceSecondary)
                        .cornerRadius(PlumpyTheme.Radius.small)
                    } else if recognitionViewModel.recognitionResult != nil {
                        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏
                        HStack {
                            Image(systemName: "checkmark.circle.fill")
                                .foregroundColor(.green)
                            Text("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                                .font(PlumpyTheme.Typography.caption1)
                                .foregroundColor(.green)
                        }
                        .padding(.horizontal, PlumpyTheme.Spacing.medium)
                        .padding(.vertical, PlumpyTheme.Spacing.small)
                        .background(Color.green.opacity(0.1))
                        .cornerRadius(PlumpyTheme.Radius.small)
                        .onTapGesture {
                            showRecognitionResults = true
                        }
                    } else {
                        // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–æ—Ç–æ
                        HStack {
                            Image(systemName: "checkmark.circle.fill")
                                .foregroundColor(.green)
                            Text(LocalizationManager.shared.localizedString(.photoReady))
                                .font(PlumpyTheme.Typography.caption1)
                                .foregroundColor(.green)
                        }
                        .padding(.horizontal, PlumpyTheme.Spacing.medium)
                        .padding(.vertical, PlumpyTheme.Spacing.small)
                        .background(Color.green.opacity(0.1))
                        .cornerRadius(PlumpyTheme.Radius.small)
                    }
                    
                } else {
                    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ
                    VStack(spacing: PlumpyTheme.Spacing.medium) {
                        // –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏
                        PhotosPicker(selection: $selectedPhotoItem, matching: .images) {
                            HStack {
                                Image(systemName: "photo.on.rectangle")
                                Text(LocalizationManager.shared.localizedString(.pickFromGallery))
                                    .fontWeight(.medium)
                            }
                            .frame(maxWidth: .infinity)
                            .padding(.vertical, PlumpyTheme.Spacing.medium)
                            .background(PlumpyTheme.primaryAccent)
                            .foregroundColor(.white)
                            .cornerRadius(PlumpyTheme.Radius.medium)
                        }
                        
                        // –ö–Ω–æ–ø–∫–∞ –∫–∞–º–µ—Ä—ã
                        Button(action: {
                            sourceType = .camera
                            showImagePicker = true
                        }) {
                            HStack {
                                Image(systemName: "camera.fill")
                                Text(LocalizationManager.shared.localizedString(.takePhoto))
                                    .fontWeight(.medium)
                            }
                            .frame(maxWidth: .infinity)
                            .padding(.vertical, PlumpyTheme.Spacing.medium)
                            .background(PlumpyTheme.surfaceSecondary)
                            .foregroundColor(PlumpyTheme.textPrimary)
                            .cornerRadius(PlumpyTheme.Radius.medium)
                        }
                        
                        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏
                        VStack(spacing: PlumpyTheme.Spacing.small) {
                            Image(systemName: "camera.viewfinder")
                                .font(.title2)
                                .foregroundColor(PlumpyTheme.primaryAccent)
                            
                            Text("–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£")
                                .font(PlumpyTheme.Typography.caption1)
                                .foregroundColor(PlumpyTheme.textSecondary)
                                .multilineTextAlignment(.center)
                        }
                        .padding(PlumpyTheme.Spacing.medium)
                        .background(PlumpyTheme.surfaceSecondary)
                        .cornerRadius(PlumpyTheme.Radius.medium)
                    }
                }
            }
        }
        .plumpyCard()
    }
    
    // MARK: - –°–µ–∫—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫
    private var notesSection: some View {
        VStack(alignment: .leading, spacing: PlumpyTheme.Spacing.medium) {
            Text(LocalizationManager.shared.localizedString(.notes))
                .font(PlumpyTheme.Typography.headline)
                .fontWeight(.semibold)
                .foregroundColor(PlumpyTheme.textPrimary)
                .frame(maxWidth: .infinity, alignment: .leading)
            
            VStack(alignment: .leading, spacing: PlumpyTheme.Spacing.small) {
                Text(LocalizationManager.shared.localizedString(.notes))
                    .font(PlumpyTheme.Typography.caption1)
                    .fontWeight(.medium)
                    .foregroundColor(PlumpyTheme.textSecondary)
                
                ZStack(alignment: .topLeading) {
                    RoundedRectangle(cornerRadius: PlumpyTheme.Radius.medium)
                        .fill(PlumpyTheme.neutral50)
                        .overlay(
                            RoundedRectangle(cornerRadius: PlumpyTheme.Radius.medium)
                                .stroke(PlumpyTheme.neutral200, lineWidth: 1)
                        )
                        .shadow(
                            color: PlumpyTheme.shadow.opacity(0.02),
                            radius: PlumpyTheme.Shadow.small.radius,
                            x: PlumpyTheme.Shadow.small.x,
                            y: PlumpyTheme.Shadow.small.y
                        )
                    
                    if notes.isEmpty {
                        Text(LocalizationManager.shared.localizedString(.notes))
                            .font(PlumpyTheme.Typography.body)
                            .foregroundColor(PlumpyTheme.textTertiary)
                            .padding(.horizontal, PlumpyTheme.Spacing.medium)
                            .padding(.top, PlumpyTheme.Spacing.medium)
                    }
                    
                    TextEditor(text: $notes)
                        .font(PlumpyTheme.Typography.body)
                        .foregroundColor(PlumpyTheme.textPrimary)
                        .padding(.horizontal, PlumpyTheme.Spacing.medium)
                        .padding(.vertical, PlumpyTheme.Spacing.medium)
                        .background(Color.clear)
                        .frame(minHeight: 80, maxHeight: 120)
                }
            }
        }
        .plumpyCard()
    }
    
    // MARK: - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    private func applyRecognitionResults(_ result: FoodRecognitionResult) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫ –ø–æ–ª—è–º —Ñ–æ—Ä–º—ã
        mealName = result.name
        calories = String(Int(result.calories))
        protein = String(format: "%.1f", result.protein)
        fat = String(format: "%.1f", result.fat)
        carbs = String(format: "%.1f", result.carbs)
    }
    
    private func saveMeal() {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        guard !mealName.isEmpty else {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print("Meal name is required")
            return
        }
        
        guard let caloriesInt = Int(calories), caloriesInt > 0 else {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print("Valid calories are required")
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
        let product = FoodProduct(
            name: mealName,
            caloriesPerServing: caloriesInt,
            protein: Double(protein) ?? 0,
            carbs: Double(carbs) ?? 0,
            fat: Double(fat) ?? 0
        )
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Data –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        var photoData: Data? = nil
        if let image = selectedImage {
            photoData = image.jpegData(compressionQuality: 0.8)
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏
        let foodEntry = FoodEntry(
            name: mealName,
            date: selectedTime,
            mealType: selectedMealType,
            products: [product],
            notes: notes.isEmpty ? nil : notes,
            photoData: photoData
        )
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        modelContext.insert(foodEntry)
        
        do {
            try modelContext.save()
            print("Meal saved successfully: \(foodEntry.displayName)")
            dismiss()
        } catch {
            print("Error saving meal: \(error)")
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        }
    }

}

#Preview {
    AddMealView(mealType: .lunch)
}
