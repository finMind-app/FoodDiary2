//
//  FoodRecognitionService.swift
//  FoodDiaryTwo
//
//  Created by user on 31.07.2025.
//

import Foundation
import SwiftUI
import Vision
import CoreML
import CoreGraphics

// MARK: - –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
protocol FoodRecognitionServiceProtocol {
    func recognizeFood(from image: UIImage) async throws -> FoodRecognitionResult
    func analyzeImageQuality(_ image: UIImage) -> ImageQualityResult
    func preprocessImage(_ image: UIImage) -> UIImage?
}

// MARK: - –°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –µ–¥—ã —Å OpenRouter API
class FoodRecognitionService: FoodRecognitionServiceProtocol, ObservableObject {
    
    // MARK: - –°–≤–æ–π—Å—Ç–≤–∞
    @Published var isProcessing = false
    @Published var processingProgress: Double = 0.0
    
    private let imageAnalyzer = ImageQualityAnalyzer()
    private let openRouterAPI = OpenRouterAPIService()
    
    // MARK: - –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    func recognizeFood(from image: UIImage) async throws -> FoodRecognitionResult {
        print("üîÑ FoodRecognitionService: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("üìê –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(image.size)")
        
        await MainActor.run { 
            isProcessing = true 
            processingProgress = 0.0
        }
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        let qualityResult = analyzeImageQuality(image)
        print("üìä –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: \(qualityResult.isSuitable ? "–ø–æ–¥—Ö–æ–¥–∏—Ç" : "–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç")")
        guard qualityResult.isSuitable else {
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            throw FoodRecognitionError.imageTooSmall
        }
        
        await MainActor.run { processingProgress = 0.1 }
        
        // –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        guard let processedImage = preprocessImage(image) else {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            throw FoodRecognitionError.processingFailed
        }
        
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        await MainActor.run { processingProgress = 0.2 }
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        guard let imageData = processedImage.jpegData(compressionQuality: 0.8),
              let base64String = imageData.base64EncodedString().addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) else {
            print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64")
            throw FoodRecognitionError.imageConversionFailed
        }
        
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ base64, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: \(imageData.count) –±–∞–π—Ç")
        await MainActor.run { processingProgress = 0.3 }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API
        print("üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API...")
        let startTime = Date()
        let result = try await openRouterAPI.analyzeFoodImage(base64String: base64String)
        let processingTime = Date().timeIntervalSince(startTime)
        
        print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç API –∑–∞ \(processingTime) —Å–µ–∫—É–Ω–¥")
        await MainActor.run { 
            processingProgress = 1.0
            isProcessing = false 
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        var finalResult = result
        finalResult.processingTime = processingTime
        finalResult.imageSize = image.size
        
        print("üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(finalResult.name), \(finalResult.calories) –∫–∞–ª–æ—Ä–∏–π")
        return finalResult
    }
    
    // MARK: - –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    func analyzeImageQuality(_ image: UIImage) -> ImageQualityResult {
        return imageAnalyzer.analyze(image)
    }
    
    // MARK: - –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    func preprocessImage(_ image: UIImage) -> UIImage? {
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        let targetSize = CGSize(width: 512, height: 512)
        
        UIGraphicsBeginImageContextWithOptions(targetSize, false, 1.0)
        image.draw(in: CGRect(origin: .zero, size: targetSize))
        let resizedImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return resizedImage
    }
}

// MARK: - –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API
class OpenRouterAPIService {
    private let remoteConfigService = RemoteConfigService()
    private let baseURL = "https://openrouter.ai/api/v1/chat/completions"
    private let model = "qwen/qwen2.5-vl-32b-instruct:free"
    
    // MARK: - –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞
    private func getAPIKey() async throws -> String {
        return try await withCheckedThrowingContinuation { continuation in
            remoteConfigService.getAPIKey { apiKey in
                if let apiKey = apiKey {
                    continuation.resume(returning: apiKey)
                } else {
                    continuation.resume(throwing: FoodRecognitionError.apiError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á"))
                }
            }
        }
    }
    
    func analyzeFoodImage(base64String: String) async throws -> FoodRecognitionResult {
        print("üåê OpenRouterAPIService: –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("üì° URL: \(baseURL)")
        print("ü§ñ –ú–æ–¥–µ–ª—å: \(model)")
        
        // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        let apiKey = try await getAPIKey()
        
        let url = URL(string: baseURL)!
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è OpenRouter
        request.setValue("FoodDiaryTwo/1.0", forHTTPHeaderField: "HTTP-Referer")
        request.setValue("https://fooddiary.app", forHTTPHeaderField: "X-Title")
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–Ω–æ API
        let openRouterRequest = createOpenRouterRequest(base64String: base64String)
        
        do {
            request.httpBody = try JSONEncoder().encode(openRouterRequest)
            print("üì¶ –ó–∞–ø—Ä–æ—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω, —Ä–∞–∑–º–µ—Ä: \(request.httpBody?.count ?? 0) –±–∞–π—Ç")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: \(error)")
            throw FoodRecognitionError.processingFailed
        }
        
        print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å...")
        let (data, response) = try await URLSession.shared.data(for: request)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
        guard let httpResponse = response as? HTTPURLResponse else {
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞")
            throw FoodRecognitionError.networkError
        }
        
        print("üì° HTTP —Å—Ç–∞—Ç—É—Å: \(httpResponse.statusCode)")
        guard httpResponse.statusCode == 200 else {
            let errorMessage = String(data: data, encoding: .utf8) ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            print("‚ùå HTTP –æ—à–∏–±–∫–∞: \(httpResponse.statusCode) - \(errorMessage)")
            throw FoodRecognitionError.apiError("HTTP \(httpResponse.statusCode): \(errorMessage)")
        }
        
        print("‚úÖ HTTP –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–µ–Ω, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: \(data.count) –±–∞–π—Ç")
        
        // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        do {
            let openRouterResponse = try JSONDecoder().decode(OpenRouterResponse.self, from: data)
            
            guard let firstChoice = openRouterResponse.choices.first,
                  let content = firstChoice.message.content.data(using: .utf8) else {
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API")
                throw FoodRecognitionError.invalidResponse
            }
            
            print("üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞: \(firstChoice.message.content)")
            
            // –ü–∞—Ä—Å–∏–º JSON –∏–∑ content
            let foodAnalysis = try JSONDecoder().decode(OpenRouterFoodAnalysis.self, from: content)
            print("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: \(foodAnalysis.–Ω–∞–∑–≤–∞–Ω–∏–µ)")
            
            return FoodRecognitionResult(from: foodAnalysis)
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: \(error)")
            throw FoodRecognitionError.invalidResponse
        }
    }
    
    private func createOpenRouterRequest(base64String: String) -> OpenRouterRequest {
        let imageURL = "data:image/jpeg;base64,\(base64String)"
        
        let content = [
            OpenRouterContent(
                type: "text",
                text: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Ñ–æ—Ç–æ –±–ª—é–¥–∞. –í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ: –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£ (–±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã).",
                image_url: nil
            ),
            OpenRouterContent(
                type: "image_url",
                text: nil,
                image_url: OpenRouterImageURL(url: imageURL)
            )
        ]
        
        let message = OpenRouterMessage(role: "user", content: content)
        
        let jsonSchema = OpenRouterJSONSchema(
            name: "meal_analysis_mobile",
            schema: OpenRouterSchema(
                type: "object",
                properties: [
                    "–Ω–∞–∑–≤–∞–Ω–∏–µ": OpenRouterProperty(type: "string", properties: nil),
                    "–∫–∞–ª–æ—Ä–∏–∏": OpenRouterProperty(type: "number", properties: nil),
                    "–±–∂—É": OpenRouterProperty(
                        type: "object",
                        properties: [
                            "–±–µ–ª–∫–∏": OpenRouterProperty(type: "number", properties: nil),
                            "–∂–∏—Ä—ã": OpenRouterProperty(type: "number", properties: nil),
                            "—É–≥–ª–µ–≤–æ–¥—ã": OpenRouterProperty(type: "number", properties: nil)
                        ]
                    )
                ],
                required: ["–Ω–∞–∑–≤–∞–Ω–∏–µ", "–∫–∞–ª–æ—Ä–∏–∏", "–±–∂—É"]
            )
        )
        
        let responseFormat = OpenRouterResponseFormat(
            type: "json_schema",
            json_schema: jsonSchema
        )
        
        return OpenRouterRequest(
            model: model,
            messages: [message],
            max_tokens: 150,
            temperature: 0,
            response_format: responseFormat
        )
    }
}

// MARK: - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
class ImageQualityAnalyzer {
    
    func analyze(_ image: UIImage) -> ImageQualityResult {
        let size = image.size
        let megapixels = (size.width * size.height) / 1_000_000
        
        let isSuitable = megapixels >= 0.25 && megapixels <= 4.0 // 0.25MP - 4MP
        let quality = calculateQualityScore(size: size, megapixels: megapixels)
        
        return ImageQualityResult(
            isSuitable: isSuitable,
            megapixels: megapixels,
            quality: quality,
            recommendations: generateRecommendations(megapixels: megapixels)
        )
    }
    
    private func calculateQualityScore(size: CGSize, megapixels: Double) -> Double {
        var score = 0.0
        
        // –†–∞–∑–º–µ—Ä
        if megapixels >= 1.0 { score += 0.4 }
        else if megapixels >= 0.5 { score += 0.3 }
        else if megapixels >= 0.25 { score += 0.2 }
        
        // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        let aspectRatio = size.width / size.height
        if aspectRatio >= 0.8 && aspectRatio <= 1.2 { score += 0.3 } // –ö–≤–∞–¥—Ä–∞—Ç
        else if aspectRatio >= 0.6 && aspectRatio <= 1.7 { score += 0.2 } // –ü–æ—Ä—Ç—Ä–µ—Ç/–ª–∞–Ω–¥—à–∞—Ñ—Ç
        
        // –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        if size.width >= 512 && size.height >= 512 { score += 0.3 }
        else if size.width >= 256 && size.height >= 256 { score += 0.2 }
        
        return min(score, 1.0)
    }
    
    private func generateRecommendations(megapixels: Double) -> [String] {
        var recommendations: [String] = []
        
        if megapixels < 0.5 {
            recommendations.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –Ω–µ –º–µ–Ω–µ–µ 0.5MP")
        }
        
        if megapixels > 3.0 {
            recommendations.append("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ")
        }
        
        if recommendations.isEmpty {
            recommendations.append("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        }
        
        return recommendations
    }
}

// MARK: - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
struct ImageQualityResult {
    let isSuitable: Bool
    let megapixels: Double
    let quality: Double
    let recommendations: [String]
}


