//
//  RemoteConfigService.swift
//  FoodDiaryTwo
//
//  Created by user on 31.07.2025.
//

import Foundation

// MARK: - –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
protocol RemoteConfigServiceProtocol {
    func getAPIKey(completion: @escaping (String?) -> Void)
    func refreshAPIKey(completion: @escaping (Bool) -> Void)
}

// MARK: - –°–µ—Ä–≤–∏—Å —É–¥–∞–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
class RemoteConfigService: RemoteConfigServiceProtocol, ObservableObject {
    
    // MARK: - –°–≤–æ–π—Å—Ç–≤–∞
    private let csvURL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vT-wvWAbmKGId7oTEFhAUGdUWJt1BrexuREA2XqmDWg8CcjXTt1-KuX7zimYYe7vVc4hlme6F0Rk0FI/pub?gid=0&single=true&output=csv"
    private let apiKeyKey = "remote_api_key"
    private let lastUpdateKey = "last_api_key_update"
    private let updateInterval: TimeInterval = 24 * 60 * 60 // 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    // MARK: - –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞
    func getAPIKey(completion: @escaping (String?) -> Void) {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
        if let cachedKey = getCachedAPIKey() {
            print("üì± RemoteConfigService: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª—é—á")
            completion(cachedKey)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á
            if shouldUpdateAPIKey() {
                print("üîÑ RemoteConfigService: –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞")
                refreshAPIKey { success in
                    if success {
                        print("‚úÖ RemoteConfigService: API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–æ–Ω–µ")
                    } else {
                        print("‚ö†Ô∏è RemoteConfigService: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á –≤ —Ñ–æ–Ω–µ")
                    }
                }
            }
            return
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å
        print("üåê RemoteConfigService: –ó–∞–≥—Ä—É–∂–∞–µ–º API –∫–ª—é—á –∏–∑ Google Sheets")
        loadAPIKeyFromRemote { [weak self] apiKey in
            if let apiKey = apiKey {
                self?.cacheAPIKey(apiKey)
                completion(apiKey)
            } else {
                print("‚ùå RemoteConfigService: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á")
                completion(nil)
            }
        }
    }
    
    // MARK: - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞
    func refreshAPIKey(completion: @escaping (Bool) -> Void) {
        print("üîÑ RemoteConfigService: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞")
        loadAPIKeyFromRemote { [weak self] apiKey in
            if let apiKey = apiKey {
                self?.cacheAPIKey(apiKey)
                print("‚úÖ RemoteConfigService: API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                completion(true)
            } else {
                print("‚ùå RemoteConfigService: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞")
                completion(false)
            }
        }
    }
    
    // MARK: - –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–∞ –∏–∑ Google Sheets
    private func loadAPIKeyFromRemote(completion: @escaping (String?) -> Void) {
        guard let url = URL(string: csvURL) else {
            print("‚ùå RemoteConfigService: –ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV")
            completion(nil)
            return
        }
        
        let task = URLSession.shared.dataTask(with: url) { data, response, error in
            DispatchQueue.main.async {
                if let error = error {
                    print("‚ùå RemoteConfigService: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)")
                    completion(nil)
                    return
                }
                
                guard let httpResponse = response as? HTTPURLResponse,
                      httpResponse.statusCode == 200 else {
                    print("‚ùå RemoteConfigService: HTTP –æ—à–∏–±–∫–∞: \((response as? HTTPURLResponse)?.statusCode ?? -1)")
                    completion(nil)
                    return
                }
                
                guard let data = data,
                      let csvString = String(data: data, encoding: .utf8) else {
                    print("‚ùå RemoteConfigService: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è CSV –¥–∞–Ω–Ω—ã—Ö")
                    completion(nil)
                    return
                }
                
                let apiKey = self.parseAPIKeyFromCSV(csvString)
                if let apiKey = apiKey {
                    print("‚úÖ RemoteConfigService: API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ CSV")
                } else {
                    print("‚ùå RemoteConfigService: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CSV")
                }
                completion(apiKey)
            }
        }
        
        task.resume()
    }
    
    // MARK: - –ü–∞—Ä—Å–∏–Ω–≥ API –∫–ª—é—á–∞ –∏–∑ CSV
    private func parseAPIKeyFromCSV(_ csvString: String) -> String? {
        let lines = csvString.components(separatedBy: .newlines)
        
        for line in lines {
            let columns = line.components(separatedBy: ",")
            
            // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å apiKey
            if columns.count >= 2 && columns[0].trimmingCharacters(in: .whitespacesAndNewlines).lowercased() == "apikey" {
                let apiKey = columns[1].trimmingCharacters(in: .whitespacesAndNewlines)
                if !apiKey.isEmpty {
                    return apiKey
                }
            }
        }
        
        return nil
    }
    
    // MARK: - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞
    private func cacheAPIKey(_ apiKey: String) {
        UserDefaults.standard.set(apiKey, forKey: apiKeyKey)
        UserDefaults.standard.set(Date(), forKey: lastUpdateKey)
        print("üíæ RemoteConfigService: API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ UserDefaults")
    }
    
    // MARK: - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API –∫–ª—é—á–∞
    private func getCachedAPIKey() -> String? {
        return UserDefaults.standard.string(forKey: apiKeyKey)
    }
    
    // MARK: - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    private func shouldUpdateAPIKey() -> Bool {
        guard let lastUpdate = UserDefaults.standard.object(forKey: lastUpdateKey) as? Date else {
            return true // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º
        }
        
        let timeSinceLastUpdate = Date().timeIntervalSince(lastUpdate)
        return timeSinceLastUpdate >= updateInterval
    }
}

// MARK: - –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
extension RemoteConfigService {
    
    /// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à)
    func getAPIKeySync() -> String? {
        return getCachedAPIKey()
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏
    private func isNetworkAvailable() -> Bool {
        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É
        return true
    }
}
