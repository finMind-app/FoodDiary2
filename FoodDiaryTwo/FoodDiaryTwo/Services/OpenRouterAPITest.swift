//
//  OpenRouterAPITest.swift
//  FoodDiaryTwo
//
//  Created by user on 31.07.2025.
//

import Foundation
import UIKit

// MARK: - –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OpenRouter API
class OpenRouterAPITest {
    
    static func testAPI() async {
        print("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç OpenRouter API...")
        
        let apiService = OpenRouterAPIService()
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (1x1 –ø–∏–∫—Å–µ–ª—å)
        let testImage = createTestImage()
        
        do {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
            guard let imageData = testImage.jpegData(compressionQuality: 0.8),
                  let base64String = imageData.base64EncodedString().addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) else {
                print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64")
                return
            }
            
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...")
            let result = try await apiService.analyzeFoodImage(base64String: base64String)
            
            print("‚úÖ API —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
            print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print("   - –ù–∞–∑–≤–∞–Ω–∏–µ: \(result.name)")
            print("   - –ö–∞–ª–æ—Ä–∏–∏: \(result.calories)")
            print("   - –ë–µ–ª–∫–∏: \(result.protein)g")
            print("   - –ñ–∏—Ä—ã: \(result.fat)g")
            print("   - –£–≥–ª–µ–≤–æ–¥—ã: \(result.carbs)g")
            print("   - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: \(result.processingTime) —Å–µ–∫")
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–∞: \(error)")
            if let recognitionError = error as? FoodRecognitionError {
                print("   - –û–ø–∏—Å–∞–Ω–∏–µ: \(recognitionError.localizedDescription)")
                print("   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: \(recognitionError.recoverySuggestion ?? "–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")")
            }
        }
    }
    
    private static func createTestImage() -> UIImage {
        let size = CGSize(width: 512, height: 512)
        UIGraphicsBeginImageContextWithOptions(size, false, 1.0)
        
        // –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        let context = UIGraphicsGetCurrentContext()!
        let colors = [UIColor.red.cgColor, UIColor.blue.cgColor]
        let colorSpace = CGColorSpaceCreateDeviceRGB()
        let gradient = CGGradient(colorsSpace: colorSpace, colors: colors as CFArray, locations: [0, 1])!
        
        context.drawLinearGradient(gradient, start: CGPoint(x: 0, y: 0), end: CGPoint(x: size.width, y: size.height), options: [])
        
        let image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return image
    }
}
