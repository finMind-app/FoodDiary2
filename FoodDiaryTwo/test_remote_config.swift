#!/usr/bin/env swift

// –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RemoteConfigService
// –ó–∞–ø—É—Å–∫: swift test_remote_config.swift

import Foundation

// –ò–º–∏—Ç–∞—Ü–∏—è RemoteConfigService –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class TestRemoteConfigService {
    private let csvURL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vT-wvWAbmKGId7oTEFhAUGdUWJt1BrexuREA2XqmDWg8CcjXTt1-KuX7zimYYe7vVc4hlme6F0Rk0FI/pub?gid=0&single=true&output=csv"
    
    func testCSVDownload() {
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É CSV –∏–∑ Google Sheets...")
        
        guard let url = URL(string: csvURL) else {
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL")
            return
        }
        
        let task = URLSession.shared.dataTask(with: url) { data, response, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)")
                return
            }
            
            guard let httpResponse = response as? HTTPURLResponse,
                  httpResponse.statusCode == 200 else {
                print("‚ùå HTTP –æ—à–∏–±–∫–∞: \((response as? HTTPURLResponse)?.statusCode ?? -1)")
                return
            }
            
            guard let data = data,
                  let csvString = String(data: data, encoding: .utf8) else {
                print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è CSV")
                return
            }
            
            print("‚úÖ CSV —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            print("üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV:")
            print(csvString)
            
            // –ü–∞—Ä—Å–∏–º API –∫–ª—é—á
            let apiKey = self.parseAPIKeyFromCSV(csvString)
            if let apiKey = apiKey {
                print("üîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: \(String(apiKey.prefix(20)))...")
            } else {
                print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ CSV")
            }
        }
        
        task.resume()
    }
    
    private func parseAPIKeyFromCSV(_ csvString: String) -> String? {
        let lines = csvString.components(separatedBy: .newlines)
        
        for line in lines {
            let columns = line.components(separatedBy: ",")
            
            if columns.count >= 2 && columns[0].trimmingCharacters(in: .whitespacesAndNewlines).lowercased() == "apikey" {
                let apiKey = columns[1].trimmingCharacters(in: .whitespacesAndNewlines)
                if !apiKey.isEmpty {
                    return apiKey
                }
            }
        }
        
        return nil
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ RemoteConfigService")
print("=" * 50)

let tester = TestRemoteConfigService()
tester.testCSVDownload()

// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
RunLoop.main.run(until: Date().addingTimeInterval(10))
